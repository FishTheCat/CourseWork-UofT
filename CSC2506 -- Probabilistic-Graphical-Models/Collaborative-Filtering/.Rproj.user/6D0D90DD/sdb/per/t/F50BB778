{
    "collab_server" : "",
    "contents" : "---\noutput: \n  pdf_document:\n    fig_caption: yes\n---\n\n---\ntitle: \"CSC2506 Assignment 1\"\nauthor: \"Matthew Scicluna\"\ndate: `r Sys.Date()`\n---\n\n#Question 1 and 2\nSee paper attached at end of document for the answers to these questions.\n\n\\pagebreak\n\n#Question 3: Spam classification using logistic regression\n```{r setup, include=FALSE, results='hide'}\n\n\npckgs = c(\"glmnet\",\"caret\",\"knitr\", \"reshape2\", \"ggplot2\")\n\nfunc <- function(x){\n  if(!is.element(x, rownames(installed.packages())))\n  {install.packages(x, quiet=TRUE)}\n}\n\nlapply(pckgs, func)\nlapply(pckgs, library, character.only=TRUE)\n\nknitr::opts_chunk$set(cache=TRUE)\n```\n\n```{r, echo=FALSE,results='hide', warning=FALSE, cache=TRUE}\ntrain.DF <- read.table('Data\\\\spambase.train.txt', header=FALSE, sep=\",\")\ntrain.DF[,\"V58\"] = as.factor(train.DF[,\"V58\"])\ntest.DF <- read.table('Data\\\\spambase.test.txt', header=FALSE, sep=\",\")\ntest.DF[,\"V58\"] = as.factor(test.DF[,\"V58\"])\n\n\n#make grid finer and smaller\neGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )\n\nfitControl <- trainControl(method = \"cv\",\n                       number = 5,\n                       verboseIter = TRUE)\n\nfit <- train(V58 ~.,\n             data = train.DF,\n             method = \"glmnet\",\n             tuneGrid = eGrid,\n             trControl = fitControl,\n             family = \"binomial\")\n\n\ntrain.pred <- predict(fit, newdata=train.DF[,1:57])\ntest.pred <- predict(fit, newdata=test.DF[,1:57])\n\ntrain.err <- mean(as.factor(train.pred) != train.DF[,58])\ntest.err <- mean(as.factor(test.pred) != test.DF[,58])\n\n#Normalizing the covariates\ntrain.DF2 = train.DF\ntest.DF2 = test.DF\ntrain.DF2[,1:57] <- scale(train.DF[,1:57], center=TRUE, scale=TRUE)\ntest.DF2[,1:57] <- scale(test.DF[,1:57], center=TRUE, scale=TRUE)\n\nfit2 <- train(V58 ~.,\n             data = train.DF2,\n             method = \"glmnet\",\n             tuneGrid = eGrid,\n             trControl = fitControl,\n             family = \"binomial\")\n\ntest.pred2 <- predict(fit, newdata=train.DF2[,1:57])\ntest.pred2 <- predict(fit2, newdata=test.DF2[,1:57])\n\n\ntrain.err2 <- mean(as.factor(test.pred) != test.DF[,58])\ntest.err2 <- mean(as.factor(test.pred2) != test.DF[,58])\n\n#Log trainsforming the covariates\ntrain.DF.log <- train.DF\ntest.DF.log <- test.DF\ntrain.DF.log[,1:57] <- log(1+train.DF[,1:57])\ntest.DF.log[,1:57] <- log(1+test.DF[,1:57])\n\nfit3 <- train(V58 ~.,\n             data = train.DF.log,\n             method = \"glmnet\",\n             tuneGrid = eGrid,\n             trControl = fitControl,\n             family = \"binomial\")\n\n\ntrain.pred <- predict(fit3, newdata=train.DF.log[,1:57])\ntest.pred <- predict(fit3, newdata=test.DF.log[,1:57])\n\n\ntrain.err3 <- mean(as.factor(train.pred) != train.DF[,58])\ntest.err3 <- mean(as.factor(test.pred) != test.DF[,58])\n\n#Transforming the covariates into binary variables\ntrain.DF.bin<-train.DF\ntest.DF.bin <- test.DF\ntrain.DF.bin[train.DF.bin != 0] <- 1\ntest.DF.bin[test.DF.bin != 0] <- 1\n\nfit4 <- train(V58 ~.,\n             data = train.DF.bin,\n             method = \"glmnet\",\n             tuneGrid = eGrid,\n             trControl = fitControl,\n             family = \"binomial\")\n\ntrain.pred <- predict(fit4, newdata=train.DF.bin[,1:57])\ntest.pred <- predict(fit4, newdata=test.DF.bin[,1:57])\n\n\ntrain.err4 <- mean(as.factor(train.pred) != train.DF[,58])\ntest.err4 <- mean(as.factor(test.pred) != test.DF[,58])\n\nResultTab <- data.frame(Lambda=c(fit$bestTune[1,2],fit2$bestTune[1,2],fit3$bestTune[1,2],fit4$bestTune[1,2]), \n                        Train.err = c(train.err, train.err2, train.err3, train.err4),\n                        Test.err = c(test.err,test.err2,test.err3,test.err4) )\n  \n```\n\nWe used the [glmnet](https://cran.r-project.org/web/packages/glmnet/glmnet.pdf) package to get a $l^2$ regularized logistic regression function. We used the \\texttt{train} function from the [Caret](https://cran.r-project.org/web/packages/caret/caret.pdf) package to train the regularization parameter (lambda) using 5 fold cross validation.  The regularization parameter was selected from a simple grid search and we only considered values of lambda that were between 0 and 0.1, since practice runs indicated that values > 0.1 produced very innacurate classifiers. We transformed the data in one of four ways and trained the same regularized logistic model and compared the resultant optimal lambda along with its training and test error. The results are presented in table 1.\n\n```{r, echo=FALSE, warning=FALSE, cache=TRUE}\nResultTab2 <- round(ResultTab,3)\nrownames(ResultTab2) <- c(\"No Transformation\",\"Centered Data\",\"Log Transformed Data\",\"Binarized Data\")\ncolnames(ResultTab2) <- c(\"Lambda\",\"Training Error\",\"Test Error\")\n\nknitr::kable(ResultTab2, cap=\"The best Lambda and training and test errors of each model with different data transformations applied\")\n\nDAT <- data.frame(lambda=fit$results[,2],\n                  None = fit$results[,3],\n                  Centered = fit2$results[1:99,3],\n                  LogTransformed = fit3$results[1:99,3],\n                  Binarize = fit4$results[1:99,3])\n```\n\nIn figure 1 we can see the effect of each data transformation of the selection of the optimal lambda. We can see that the accuracy is always highest at small values of lambda and gets progressively worse, justifying our decision to only consider lambda's $\\leq 0.1$\n\n```{r, echo=FALSE, warning=FALSE, cache=TRUE, fig.cap=\"Comparing the accuracy of each Lambda between the models with different data transformations applied\",fig.height=3}\n\n\nDAT2 <- melt(DAT,id=(\"lambda\"))\ncolnames(DAT2)<- c(\"lambda\",\"Transformation\",\"Accuracy\")\n\n\nggplot(data=DAT2, aes(lambda, Accuracy))+\ngeom_point(aes(color=Transformation), size=3)+\n  labs(x=\"Lambda\",\n       y=\"Accuracy\",\n       title=\"Lambda Values vs Accuracy\")\n\n```\n\nWe notice that by applying $\\log(x_{ij} + 1)$ to each $x_{ij} \\in Dataset$ results in the model having the lowest test error. We look at absolute value of each of the weights of the logistic regression model trained on the logarithmically transformed data to see which 5 features are most informative in determining that an email should be marked as spam.\n\n\n```{r, echo=FALSE, warning=FALSE, cache=TRUE}\nind = as.numeric(rownames(fit3$bestTune))\ncoeffs = fit3$finalModel$beta[,ind]\nsmallest = names(sort(abs(coeffs))[1:5])\nlargest = names(sort(abs(coeffs))[53:57])\n\ndd <- round( c( sort(abs(coeffs))[1:5], sort(abs(coeffs))[53:57] ), 4)\n\nknitr::kable(t(dd), cap=\"The values of the 5 smallest and largest weights of the logistic model trained on log transformed data\")\n```\n\nWe see that `r smallest` are the weights with the smallest values (and thus they govern the features most likely to indicate non-spam) and `r largest` are the weights with the largest values, and so are most likely to indicate spam.\n\n#Question 4: Collaborative Filtering\n```{r, echo=FALSE, warning=FALSE, cache=TRUE, fig.cap=\"Assessing the fit of the normal distribution with its maximum likelihood parameters to the movie ratings data. The normal density is plotted in red.\", fig.height=3}\nmov.df<-read.table(\"Data\\\\u.data\")\nratings<-data.frame( ratings = as.numeric(mov.df[,3]) )\n\n\nmu <- mean(ratings$ratings)\nsigma <- var(ratings$ratings)\ny = data.frame( props = prop.table(table(ratings$ratings)))\n\n\nggplot(data=ratings, aes(x=ratings))+\n  geom_bar(aes(y = ..density..), binwidth=1, color=\"black\", fill=\"white\")+\n  stat_function(fun = dnorm, args = list(mu, sigma), fill=\"red\", colour=\"red\", geom=\"ribbon\", alpha=0.2, \n                mapping =    aes(ymin=0,ymax=..y..)) +\n  labs(x=\"Ratings\",y=\"Proportion\",title=\"Fitting a Normal Distribution to the Movie Ratings Data\")\n\n```\n\nThe log likelihood for a normal distribution is as follows:\n\n   $$\\ln\\mathcal{L}(\\mu,\\sigma^2)\n     = -\\frac{N}{2}\\ln(2\\pi) - \\frac{N}{2}\\ln\\sigma^2 - \\frac{1}{2\\sigma^2}\\sum_{i=1}^N (x_i-\\mu)^2.$$\n  \nDifferentiating the log likelihood and setting this to zero yields the following maximum likelihood estimates:\n$\\mu^{(mle)}=\\frac{1}{N}\\sum_{i=1}^N x_i$ and $\\sigma^{2 (mle)} = \\frac{1}{N} \\sum_{i=1}^N (x_i - \\overline{x})^2$.\n\nWe plotted the empirical distribution of the movie ratings along with the fitted normal distribution superimposed on it. We clearly see that the distribution has a heavy tail, meaning that there are a lot more ratings above 3 than below or equal to it. This is unsurprising since we are analyzing the distribution of user submitted movie ratings. People submitting rakings to these movies would have been willing to watch the movies in the first place-- meaning  that the movies must have had some sort of appeal to them apriori.\n\nWe can see that the normal distribution is not a good fit since it has symmetric tails and is unable to capture the skewness of the empirical distribution.\n\n\\newpage\n\nWe next fit the data to the beta-binomial distribution. This distribution has the following likelihood:\n\n$$\\sum_{i=1}^N \\ln\\mathcal{L}(x_i \\mid \\theta) = \\sum_{i=1}^N \\ln {N\\choose x_i}\\frac{\\mathrm{B}(x_i+\\alpha,N- x_i+\\beta)} {\\mathrm{B}(\\alpha,\\beta)}\\!$$\n\nWe can derive the method of moments estimates analytically. The estimators are as follows:\n\n$$\\alpha^{MoM} =\\frac{Nm_1-m_2}{N(\\frac{m_2}{m_1}-m_1-1)+m_1}$$\n\n$$\\beta^{MoM} =\\frac{(N-m_1)(N-\\frac{m_2}{m_1})}{N(\\frac{m_2}{m_1}-m_1 - 1)+m_1}$$\n\nwhere $m_1 = \\frac{1}{N} \\sum_{i=1}^N x_i$ and $m_2 = \\frac{1}{N} \\sum_{i=1}^N x_i^2$\n\n\n```{r, warning=FALSE, echo=FALSE, fig.cap=\"Fitting a beta binomial distribution to the movie ratings data\",fig.height=3}\n\nnewrats <- ratings$ratings - 1\n\nm1 <-mean(newrats)\nm2 <- var(newrats) + m1^2\nm2_m1 <- m2/m1\nN <- max(newrats)\n\nalpha_hat = (N*m1 - m2)/(N*(m2_m1 - m1 - 1) + m1)\nbeta_hat = ((N-m1)*(N-m2_m1)) /(N*(m2_m1 - m1 - 1) + m1)\n\ndbetabin <- function(k,Alpha, Beta)\n{k = k-1  \nreturn((choose(N,k)*beta((k+Alpha), (N-k+Beta))) / (beta(Alpha, Beta)))}\n\nggplot(data=ratings, aes(x=ratings))+\n  geom_bar(aes(y = ..density..), binwidth=1, color=\"black\", fill=\"white\")+\n  stat_function(fun = dbetabin,args = list(Alpha=alpha_hat, Beta=beta_hat), geom=\"bar\",n=5, color=\"red\", fill=\"red\", alpha=0.2)+\n  labs(x=\"Ratings\",y=\"Proportion\",title=\"Fitting a Beta Binomial Distribution to the Movie Ratings Data\")\n```\n\nAfter some algebra, we get that $\\alpha^{MoM}$ = `r round(alpha_hat,2)` and $\\beta^{MoM}$ = `r round(beta_hat,2)`. The corresponding distribution is plotted in figure 3, superimposed to the empirical distribution. We can see that this distribution has a good fit, as it captures much more of the skewness compared to the previous normal fit.\n\nFinally, We fit a normal distribution and a beta binomial distribution to a subset of the data, leaving 20% of the data out as a test set to compare the fit of each model.\n\n\\newpage\n\n```{r, warning=FALSE, echo=FALSE, fig.cap=\"Assessing the fit of both Normal and Beta Binomial models fit to the same training data against the test data\",fig.height=3}\ntraining <- newrats[1:(0.8*length(newrats))]\ntest <- newrats[(0.8*length(newrats)+1):(length(newrats))]\n\n#Fit normal to training data and get log likelihood of test data\nmu = mean(training)\nsigma = var(training)\nll <- sum(log(dnorm(test, mu, sigma)))\n\n#Fit beta binomial to training data and get log likelihood of test data\nnewrats <- training\n\nm1 <-mean(newrats)\nm2 <- var(newrats) + m1^2\nm2_m1 <- m2/m1\nN <- max(newrats)\n\nalpha_hat = (N*m1 - m2)/(N*(m2_m1 - m1 - 1) + m1)\nbeta_hat = ((N-m1)*(N-m2_m1)) /(N*(m2_m1 - m1 - 1) + m1)\n\nll2 <- sum( log (dbetabin((test+1), alpha_hat, beta_hat)))\n\n#Plot them both together\n\ntest2 = test + 1\ntestdat<-data.frame(test2)\nmu2 = mu+1\n\nggplot(data=testdat, aes(x=test2))+\n  geom_bar(aes(y = ..density..), binwidth=1, color=\"black\", fill=\"white\")+\n  stat_function(fun = dbetabin,args = list(Alpha=alpha_hat, Beta=beta_hat), geom=\"bar\",n=5, color=\"red\", fill=\"red\", alpha=0.2)+\n  stat_function(fun = dnorm, args = list(mu2, sigma), fill=\"blue\", colour=\"blue\", geom=\"ribbon\", alpha=0.2, \n                mapping =    aes(ymin=0,ymax=..y..)) +\n  labs(x=\"Ratings\",y=\"Proportion\",title=\"Fitting a Beta Binomial and Normal Dist. to the Movie Ratings Data\")\n```\n\nThe log likelihood for the Normally fitted model was $`r round(ll)`$ and for the Beta Binomial model it was $`r round(ll2)`$ . Not surprisingly, we see that the data was more likely to come from the Beta Binomial distribution than from a normal one. This confirms our observation from figures 2 and 3 that the Beta Binomial was a better fit to the data.\n",
    "created" : 1484274575336.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2928782407",
    "id" : "F50BB778",
    "lastKnownWriteTime" : 1484338216,
    "last_content_update" : 1484338216092,
    "path" : "D:/Projects/Collaborative-Filtering/hw1-998367342.Rmd",
    "project_path" : "hw1-998367342.Rmd",
    "properties" : {
        "last_setup_crc32" : "FE42D5359a7d7950"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}