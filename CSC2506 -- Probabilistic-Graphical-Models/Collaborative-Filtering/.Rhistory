pckgs = c("glmnet","caret","knitr")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x, quiet=TRUE)}
}
lapply(pckgs, func)
lapply(pckgs, library, character.only=TRUE)
knitr::opts_chunk$set(cache=TRUE)
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
fit <- train(as.factor(train.DF[,58]) ~.,
data = train.DF[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
fit <- train(as.factor(train.DF[,58]) ~.,
data = train.DF[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
fit
fit <- train(as.factor(train.DF[,58]) ~.,
data = train.DF[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.DF[,58]
train.DF[,1:57]
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE,
classProbs = FALSE)
fit <- train(as.factor(train.DF[,58]) ~.,
data = train.DF[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
egrid
eGrid
as.factor(train.DF[,58])
train.DF[,58] = as.factor(train.DF[,58])
levels(train.DF[,58])
levels(train.DF[,58]) <- c("Spam","Not Spam")
fit <- train(train.DF[,58] ~.,
data = train.DF[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
pckgs = c("glmnet","caret","knitr")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x, quiet=TRUE)}
}
lapply(pckgs, func)
lapply(pckgs, library, character.only=TRUE)
knitr::opts_chunk$set(cache=TRUE)
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
fit <- train(as.factor(train.DF[,58]) ~.,
data = train.DF[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
colnames(train.df)
colnames(train.DF)
train.DF["V58"]
train.DF["V58"] = as.factor(train.DF["V58"])
fit <- train(V58 ~.,
data = train.DF,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
train.DF["V58"] = as.factor(train.DF["V58"])
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
train.DF["V58"] = as.factor(train.DF["V58"])
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
train.DF["V58"] = as.factor(train.DF["V58"])
train.DF["V58"] = as.factor(train.DF["V58"])
train.DF[,"V58"] = as.factor(train.DF[,"V58"])
fit <- train(V58 ~.,
data = train.DF,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.pred <- predict(fit, newdata=train.DF[,1:57])
test.pred <- predict(fit, newdata=test.DF[,1:57])
train.err <- mean(as.factor(train.pred) != train.DF[,58])
test.err <- mean(as.factor(test.pred) != test.DF[,58])
train.DF2 <- scale(train.DF[,1:57], center=TRUE, scale=TRUE)
train.DF[,"V58"]<-train.DF[,"V58"]
test.DF2 <- scale(test.DF[,1:57], center=TRUE, scale=TRUE)
fit2 <- train(V58 ~.,
data = train.DF2,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.DF2 <- scale(train.DF[,1:57], center=TRUE, scale=TRUE)
train.DF2[,"V58"]<-train.DF[,"V58"]
train.DF <- read.table('spambase.train.txt', header=FALSE, sep=",")
train.DF[,"V58"] = as.factor(train.DF[,"V58"])
test.DF <- read.table('spambase.test.txt', header=FALSE, sep=",")
test.DF[,"V58"] = as.factor(test.DF[,"V58"])
#make grid finer and smaller
eGrid <- expand.grid(lambda = seq(0.002,0.1,0.001), alpha = rep(0,100) )
fitControl <- trainControl(method = "cv",
number = 5,
verboseIter = TRUE)
fit <- train(V58 ~.,
data = train.DF,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.pred <- predict(fit, newdata=train.DF[,1:57])
test.pred <- predict(fit, newdata=test.DF[,1:57])
train.err <- mean(as.factor(train.pred) != train.DF[,58])
test.err <- mean(as.factor(test.pred) != test.DF[,58])
train.DF2[,1:57] <- scale(train.DF[,1:57], center=TRUE, scale=TRUE)
train.DF2 = train.DF
test.DF2 = test.DF
train.DF2[,1:57] <- scale(train.DF[,1:57], center=TRUE, scale=TRUE)
test.DF2[,1:57] <- scale(test.DF[,1:57], center=TRUE, scale=TRUE)
fit2 <- train(V58 ~.,
data = train.DF2,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
test.pred2 <- predict(fit, newdata=train.DF2[,1:57])
test.pred2 <- predict(fit2, newdata=test.DF2[,1:57])
train.err2 <- mean(as.factor(test.pred) != test.DF[,58])
test.err2 <- mean(as.factor(test.pred2) != test.DF[,58])
train.DF.log <- train.DF
test.DF.log <- test.DF
train.DF.log[,1:57] <- log(1+train.DF[,1:57])
test.DF.log[,1:57] <- log(1+test.DF[,1:57])
fit3 <- train(as.factor(train.DF[,58]) ~.,
data = train.DF.log[,1:57],
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
fit3 <- train(V58 ~.,
data = train.DF.log,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.pred <- predict(fit3, newdata=train.DF.log[,1:57])
test.pred <- predict(fit3, newdata=test.DF.log[,1:57])
train.err3 <- mean(as.factor(train.pred) != train.DF[,58])
test.err3 <- mean(as.factor(test.pred) != test.DF[,58])
train.DF.bin<-train.DF
test.DF.bin <- test.DF
train.DF.bin[train.DF.bin != 0] <- 1
test.DF.bin[test.DF.bin != 0] <- 1
fit4 <- train(V58 ~.,
data = train.DF.bin,
method = "glmnet",
tuneGrid = eGrid,
trControl = fitControl,
family = "binomial")
train.pred <- predict(fit4, newdata=train.DF.bin[,1:57])
test.pred <- predict(fit4, newdata=test.DF.bin[,1:57])
train.err4 <- mean(as.factor(train.pred) != train.DF[,58])
test.err4 <- mean(as.factor(test.pred) != test.DF[,58])
ResultTab <- data.frame(Lambda=c(fit$bestTune[1,2],fit2$bestTune[1,2],fit3$bestTune[1,2],fit4$bestTune[1,2]),
Train.err = c(train.err, train.err2, train.err3, train.err4),
Test.err = c(test.err,test.err2,test.err3,test.err4) )
ResultTab2 <- round(ResultTab,3)
rownames(ResultTab2) <- c("No Transformation","Centered Data","Log Transformed Data","Binarized Data")
colnames(ResultTab2) <- c("Lambda","Training Error","Test Error")
knitr::kable(ResultTab2, cap="The best Lambda and training and test errors of each model with different data transformations applied")
DAT <- data.frame(lambda=fit$results[,2],
None = fit$results[,3],
Centered = fit2$results[1:99,3],
LogTransformed = fit3$results[1:99,3],
Binarize = fit4$results[1:99,3])
ratings
newrats
ratings
pckgs = c("glmnet","caret","knitr", "reshape2", "ggplot2")
func <- function(x){
if(!is.element(x, rownames(installed.packages())))
{install.packages(x, quiet=TRUE)}
}
lapply(pckgs, func)
lapply(pckgs, library, character.only=TRUE)
knitr::opts_chunk$set(cache=TRUE)
mov.df<-read.table("u.data")
ratings<-data.frame( ratings = as.numeric(mov.df[,3]) )
ratings
mu <- mean(ratings$ratings)
sigma <- var(ratings$ratings)
y = data.frame( props = prop.table(table(ratings$ratings)))
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")+
stat_function(fun = dnorm, args = list(mu, sigma), fill="red", colour="red", geom="ribbon", alpha=0.2,
mapping =    aes(ymin=0,ymax=..y..)) +
labs(x="Ratings",y="Proportion",title="Fitting a Normal Distribution to the Movie Ratings Data")
hist(ratings)
plot(ratings)
y
plot(y)
plot(ratings)
plot(ratings)
hist(ratings)
ratings
plot(ratings)
hist(ratings, breaks=5)
hist(as.numeric(ratings))
hist(as.numeric(ratings[1]))
ratings[[1]]
hist(ratings[[1]])
hist(y)
plot(y)
ratings
ratings[[1]]
ggplot(data=ratings[[1]], aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")+
stat_function(fun = dnorm, args = list(mu, sigma), fill="red", colour="red", geom="ribbon", alpha=0.2,
mapping =    aes(ymin=0,ymax=..y..)) +
labs(x="Ratings",y="Proportion",title="Fitting a Normal Distribution to the Movie Ratings Data")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")+
stat_function(fun = dnorm, args = list(mu, sigma), fill="red", colour="red", geom="ribbon", alpha=0.2,
mapping =    aes(ymin=0,ymax=..y..)) +
labs(x="Ratings",y="Proportion",title="Fitting a Normal Distribution to the Movie Ratings Data")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..),bins=5, binwidth=0.9, color="black", fill="white")+
stat_function(fun = dnorm, args = list(mu, sigma), fill="red", colour="red", geom="ribbon", alpha=0.2,
mapping =    aes(ymin=0,ymax=..y..)) +
labs(x="Ratings",y="Proportion",title="Fitting a Normal Distribution to the Movie Ratings Data")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..),bins=5, color="black", fill="white")+
stat_function(fun = dnorm, args = list(mu, sigma), fill="red", colour="red", geom="ribbon", alpha=0.2,
mapping =    aes(ymin=0,ymax=..y..)) +
labs(x="Ratings",y="Proportion",title="Fitting a Normal Distribution to the Movie Ratings Data")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), stat="bin" ,binwidth=0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(x=ratings, y = ..density..), binwidth=0.9, color="black", fill="white")
x
ratings
as.factor(ratings)
factor(ratings)
ratings
factor(ratings)
factor(unlist(ratings))
ratings2<-data.frame( ratings = as.factor(mov.df[,3]) )
ggplot(data=ratings2, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")
ggplot(data=ratings2, aes(x=ratings))+
geom_bar(aes(y = ..density..), stat="count",binwidth=0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")
ratings
y
plot(y)
hist(y)
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(stat="bin", color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(stat="bin",binwidth = 0.9, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(stat="bin",binwidth = 1, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=1, color="black", fill="white")
ggplot(data=ratings, aes(x=ratings))+
geom_bar(aes(y = ..density..), binwidth=1, color="black", fill="white")+
stat_function(fun = dnorm, args = list(mu, sigma), fill="red", colour="red", geom="ribbon", alpha=0.2,
mapping =    aes(ymin=0,ymax=..y..)) +
labs(x="Ratings",y="Proportion",title="Fitting a Normal Distribution to the Movie Ratings Data")
train.DF <- read.table('Data\spambase.train.txt', header=FALSE, sep=",")
train.DF <- read.table('Data\\spambase.train.txt', header=FALSE, sep=",")
train.DF[,"V58"] = as.factor(train.DF[,"V58"])
test.DF <- read.table('Data\\spambase.test.txt', header=FALSE, sep=",")
test.DF[,"V58"] = as.factor(test.DF[,"V58"])
mov.df<-read.table("Data\\u.data")
